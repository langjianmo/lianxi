<?php

declare(strict_types=1);

namespace app\shop\controller;

use app\common\controller\LianKe;
use app\common\controller\LianKePrinter;
use app\model\PrinterModel;
use think\facade\Db;
use think\facade\Log;
use think\facade\View;

class Printer extends Common
{
    public static $table = "do_printer";

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $page = input("param.page", "", "trim");
        $printer = Db::table(self::$table)
            ->where(["shop_id" => $this->shop["id"]])
            ->where('status', '<>', 99)
            ->select();

        if (!empty($printer)) {
            foreach ($printer as $k => $v) {
                if ($v['functions']) {
                    $v['functions'] = json_decode($v['functions'], true);
                } else {
                    $v['functions'] = [];
                }
                $printer[$k] = $v;
            }
        }

        return view("", ["lists" => $printer,'page'=>$page]);
    }

    public function add()
    {
        if (request()->isPost()) {
            $post = input("post.");

            $update = [
                //"print"          => json_encode($post["print"]),
                "business_hours" => json_encode($post["business_hours"]),
                "functions" => json_encode($post['functions']),
                "name" => $post["name"],
                "status" => $post["status"],
                "page_a4" => $post["page_a4"],
                "page_photo" => $post["page_photo"],
            ];
            Db::table(self::$table)->where("id", $post["id"])->update($update);
            $return = [
                "code" => 0,
                "msg" => "操作成功",
                "url" => (string)url("index")
            ];

            return json($return);
        } else {
            $id = input("get.id", 0, "intval");
            $data = [];
            if ($id > 0) {
                $data = Db::table(self::$table)->find($id);
                //$data["print"]          = json_decode($data["print"], true);
                $data["business_hours"] = json_decode($data["business_hours"], true);
                $data['functions'] = json_decode($data['functions'] ?? '[]', true);

            }
            $data = @array_merge($data, system_config('seat'));
            View::assign($data);
            return view();
        }
    }

    public function price()
    {
        if (request()->isPost()) {
            $post = input('post.');
            if (!empty($post['CashOutType_all'])) {
                $post['CashOutType'] = explode(",", $post['CashOutType_all']);
                //print_r($post);
                $insert = [];
                foreach ($post['type'] as $type => $price) {
                    $insert[] = [
                        'printer_id' => $post['CashOutType_all'],
                        'type' => $type,
                        'price' => bcmul($price, '100', 0),
                    ];
                }
                $res = 0;
                if (count($post['CashOutType']) == 1) {
                    Db::table('do_printer_price')->where(['printer_id' => $post['CashOutType_all']])->delete();
                    $res = Db::table('do_printer_price')->insertAll($insert);
                } else {
                    Db::table('do_printer_price')->where('printer_id', 'in', $post['CashOutType_all'])->delete();
                    foreach ($post['CashOutType'] as $id) {
                        foreach ($insert as $k => $v) {
                            $insert[$k]['printer_id'] = $id;
                        }
                        $res += Db::table('do_printer_price')->insertAll($insert);
                    }
                }

                $return = [
                    'code' => 0,
                    'msg' => '操作成功',
                    'url' => (string)url('index'),
                    'data' => [
                        'count' => $res,
                    ],
                ];
            } else {
                $return = [
                    'code' => 1,
                    'msg' => '操作失败',
                    'url' => (string)url('index'),
                ];
            }

            return json($return);
        } else {
            $printer_id = input('param.id');
            $printer = Db::table(self::$table)->alias('a')
                ->field('a.*,b.shop_name')
                ->join('do_shop b', 'a.shop_id=b.id', 'left')
                ->where(['a.id' => $printer_id])->find();
            $list = Db::table(self::$table)->alias('a')
                ->field('id,name text')
                ->where(['a.shop_id' => $printer['shop_id']])
                ->where('a.status', "<>", '99')
                ->select()->toArray();
            $price = Db::table('do_printer_price')->where(['printer_id' => $printer_id])->column('price', 'type');
            $vars = [
                'printer' => $printer,
                'price' => $price,
                'list' => json_encode($list)
            ];

            return view('', $vars);
        }
    }

    public function refresh()
    {
        $id = input('post.id');
        $lianke = new LianKe($id);
        $refresh = $lianke->refreshDeviceInfo();
        $device_info = $lianke->getDeviceInfo();
        $printer_info = $lianke->getPrinterListToPort($lianke->printer['device_port']);
        if (isset($printer_info['driver_name'])) {
            $printer_params = $lianke->getPrinterParams($printer_info['driver_name'], $printer_info['port']);
            $printer = PrinterModel::find($id);
            $save['data'] = [
                'refresh' => $refresh,
                'device_info' => $device_info,
                'printer_info' => $printer_info,
                'printer_params' => $printer_params
            ];
            $printer->save($save);

            $return = [
                "code" => 0,
                "msg" => $refresh['msg'] ?? '操作失败'
            ];
        } else {
            $return = [
                "code" => -1,
                "msg" => "打印机未连接,刷新失败",
                "data" => [
                    "refresh" => $refresh,
                    "printer_info" => $printer_info
                ]
            ];
        }

        return json($return);
    }

    public function clearSending()
    {
        $id = input('get.id');
        $lianke = new LianKe($id);
        $data = $lianke->getTodayTask();

        $return = [
            "code" => 0,
            "msg" => "清除了" . count($data) . "个任务",
            "url" => (string)url('index')
        ];
        return json($return);
    }

    public function papers()
    {
        $id = input('get.id');
        $printer = PrinterModel::find($id);
        if (request()->isPost()) {
            $post = input("post.");
            $save = [
                "config" => @array_merge($printer->toArray()['config'] ?? [], $post)
            ];

            $printer->save($save);
            $return = [
                "code" => 0,
                "msg" => "操作成功"
            ];
            return json($return);
        } else {
            return view('', $printer->toArray());
        }
    }

    public function status(){
        if (request()->isPost()){
            $key = input("param.key", "", "trim");
            if ($key) {
                $where = "a.status <> 99 and (a.name like '%$key%' or b.name like '%$key%' or b.shop_name like '%$key%')";
            } else {
                $where = "a.status <> 99";
            }

            $data = Db::table(self::$table)
                ->alias('a')
                ->field('a.id,a.device_id,a.device_key,a.status,a.device_port,JSON_EXTRACT(a.functions, \'$.C6\') AS photo')
                ->whereRaw($where)
                ->join('do_shop b', 'a.shop_id=b.id', 'left')
                ->order('photo desc ,id')
                ->paginate()
                ->toArray()['data'];

            foreach ($data as $v) {
                $status = $v['status'] ?? -1;
                $printer = new LianKePrinter($v['device_id'], $v['device_key']);
                Log::write(var_export($printer, true), "debug");
                $info = $printer->getDeviceInfo()['data']['info'] ?? [];
                if (!empty($info) && $status === 0) {
                    $info['online'] = 3;
                }
                $data = $printer->getPrinterList();
                foreach ($data as $i) {
                    if ($i['port'] = $v['device_port']) {
                        $data = $i;
                        $info['PrinterList'] = $i;
                        break;
                    }
                }

                if (!empty($data['port']) && $data['port'] == $v['device_port']) {
                    if ($data["isPrinter"] === 1 || $data["isPrinter"] === 0) {
                        $info['isPrinter'] = $data['isPrinter'];
                    } else {
                        if (!empty($data["support_status"])) {
                            $info['printer_status'] = $printer->getPrinterStatus($v['device_port']);
                        }
                    }
                }
                $res[$v['id']] = array_merge($v, $info);
            }

            return json($res);
        }
    }

    public function upstatus(){
        if (request()->isPost()){
            $id = input("param.id", "", "trim");
            $stauts =  $data = Db::table(self::$table)
                ->where('id',$id)
                ->value('status');
            if ($stauts != 99){
                if ($stauts == 1){
                    $count = Db::table(self::$table)
                        ->where('id',$id)
                        ->update(['status'=>0]);
                }
                if ($stauts == 0) {
                    $count = Db::table(self::$table)
                        ->where('id', $id)
                        ->update(['status' => 1]);
                }
            }
            if ($count) {
                $res =[
                    'code' => 0,
                    'msg'=> '成功',
                    'status'=>$data = Db::table(self::$table)
                        ->where('id',$id)
                        ->value('status')
                ];
            } else {
                $res =[
                    'code' => -1,
                    'msg'=> '失败'
                ];
            }
            return json($res);
        }
    }
}
