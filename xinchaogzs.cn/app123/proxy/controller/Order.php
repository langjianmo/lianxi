<?php
declare (strict_types=1);

namespace app\proxy\controller;

use app\common\controller\LianKePrinter;
use app\model\CartModel;
use think\facade\Db;
use think\facade\Log;
use think\Request;

class Order extends Common
{

    const TABLE = "do_order";

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function detail()
    {
        $type = input("type");

        $id = input("param.id", 0, "intval");
        $dy_data['code'] = 0;
        if ($type == 1) {
            $pid = input("pid");
            $Web_class = $this;
            $dy_fs = $Web_class->dy($pid);
            if ($dy_fs['data']['task_id'] ?? false) {
                $dy_data['code'] = 1;
                $dy_data['task_id'] = $dy_fs['data']['task_id'];
                $dy_data['pid'] = $pid;
                $return = ['code' => 0, 'msg' => '操作成功', 'url' => (string)url('detail', ['id' => $id])];

                return json($return);
            }
        }
        //订单信息
        $order = Db::table(self::TABLE)
            ->where(["id" => $id])
            ->find();
        //打印的文件
        $printer_list = Db::table("do_cart")
            ->where(["order_id" => $id])
            ->select()
            ->toArray();
        //店铺信息
        $shop = Db::table("do_shop")
            ->where(["id" => $order["shop_id"]])
            ->find();
        //打印机信息
        $printer = Db::table("do_printer")
            ->where(["id" => $order["printer_id"]])
            ->find();
        $photo = Db::table("do_electronic_photo")
            ->where(['order_id' => $id])
            ->select()
            ->toArray();

        $vars = [
            "order" => $order,
            "printer_list" => $printer_list,
            "shop" => $shop,
            "printer" => $printer,
            'sddy' => $dy_data,
            'photo' => $photo
        ];

        return view("", $vars);
    }

    public function cx_dy($id, $task_id)
    {
        $data = CartModel::with(['order' => function ($query) {
            $query->with('printer');
        }])->findOrEmpty($id);
        $printer = $data['order']['printer'];
        $lianKe = new LianKePrinter($printer['device_id'], $printer['device_key']);
        $res = $lianKe->getJobStatus(1, $task_id);
        if (!empty($res['code']) && $res['code'] == 200) {
            //打印成功,更新文件状态
            $cart = CartModel::find($id);
            $task_state = $res['data']['task_state'];
            if ($task_state == 'SUCCESS') {
                $task_state = $res['data']['task_result']['code'] == 200 ? 'SUCCESS' : 'FAILURE';
            }
            $cart->save(['print_status' => getPrintMsgToStatus($task_state)]);
        }
        $return = [
            "code" => 0,
            "data" => $res['data'] ?? [],
        ];
        return json($return);
    }

    public function dy($id)
    {

        $data = CartModel::with(['order' => function ($query) {
            $query->with('printer');
        }])->findOrEmpty($id);
        if ($data->isEmpty()) {
            $return = [
                "code" => -1,
                "msg" => "无文件可打印"
            ];
        } else {
            $data = $data->toArray();
            $printer = $data['order']['printer'];
            $lianKe = new LianKePrinter($printer['device_id'], $printer['device_key']);

            $params = get_dy_params($data);
            $file = $data['file'];
            Log::write(var_export($params, true), "debug");
            $res = $lianKe->addJob($printer['data']['printer_info']['drivce_name'], $file, $params, $id);
            $return = [
                "code" => 0,
                "data" => [
                    "task_id" => $res['data']['task_id'] ?? "",
                ]
            ];
        }

        return $return;

    }

    public function index()
    {
        $where = [];

        $out_trade_no = input("param.out_trade_no", "", "trim");
        if ($out_trade_no) {
            $where[] = [
                "a.out_trade_no",
                "=",
                $out_trade_no
            ];
        }

        $where[] = ["a.proxy_id", "=", $this->proxy["id"]];

        $config = [
            "query" => request()->param(),
            "list_rows" => 20
        ];
        $data = Db::table(self::TABLE)
            ->alias("a")
            ->field("a.*,b.nickname,c.shop_name,d.name printer_name")
            ->join("do_mini_user b", "a.uid=b.id", "left")
            ->join("do_shop c", "a.shop_id=c.id", "left")
            ->join("do_printer d", "a.printer_id=d.id", "left")
            ->order("a.id desc")
            ->where($where)
            ->paginate($config);

        return view(
            "index", [
            "lists" => $data,
            "pages" => $data->render()
        ]);
    }
}
