<?php
declare (strict_types=1);

namespace app\proxy\controller;

use think\facade\Db;
use think\facade\View;

class Shop extends Common
{

    public static $table = "do_shop";

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {

        $where = [];
        $shop = input("param.key", "", "trim");
        if ($shop) {
            $where[] = [
                "a.shop_name",
                "like",
                "%" . $shop . "%"
            ];
            $where[] = [
                "a.name",
                "like",
                "%" . $shop . "%"
            ];
        }

        $or_where = [
            [
                "status",
                "=",
                1
            ],
            [
                "out_refund_status",
                "in",
                "null,0,2"
            ]
        ];

        $or_sql = Db::table("do_order")
            ->fieldRaw("shop_id,sum(commission) commission")
            ->where($or_where)
            ->group("shop_id")
            ->buildSql();

        $cash_sql = Db::table("do_commission_cash_out")
            ->fieldRaw("obj_id,sum(price) price")
            ->where("obj_type", 0)
            ->group("obj_id")
            ->buildSql();

        $day_sql = Db::table("do_order")
            ->fieldRaw("shop_id,sum(commission) day_commission")
            ->where($or_where)
            ->whereDay("inserttime")
            ->group("shop_id")
            ->buildSql();

        $week_sql = Db::table("do_order")
            ->fieldRaw("shop_id,sum(commission) week_commission")
            ->where($or_where)
            ->whereWeek("inserttime")
            ->group("shop_id")
            ->buildSql();

        $month_sql = Db::table("do_order")
            ->fieldRaw("shop_id,sum(commission) month_commission")
            ->where($or_where)
            ->whereMonth("inserttime")
            ->group("shop_id")
            ->buildSql();


        $data = Db::table(self::$table)
            ->alias("a")
            ->fieldRaw("a.*,
            IFNULL(b.commission - c.price,IFNULL(b.commission,0)) commission,
            IFNULL(c.price,0) price,
            IFNULL(d.day_commission,0) day_commission,
            IFNULL(e.week_commission,0) week_commission,
            IFNULL(f.month_commission,0) month_commission
            ")
            ->leftJoin($or_sql . " b", "a.id=b.shop_id")
            ->leftJoin($day_sql . " d", "a.id=d.shop_id")
            ->leftJoin($week_sql . " e", "a.id=e.shop_id")
            ->leftJoin($month_sql . " f", "a.id=f.shop_id")
            ->leftJoin($cash_sql . " c", "a.id = c.obj_id")
            ->where('proxy_id', $this->proxy['id'])
            ->where($where)
            ->order("id")
            ->paginate();

        return view("", ["lists" => $data, "pages" => $data->render()]);
    }

    public function add()
    {

        if (request()->isPost()) {
            $post = input("post.");
            if (empty($post['IsAutoOut'])) $post['IsAutoOut'] = null;
            if ($post["id"]) {
                Db::table(self::$table)->update($post);
                $return = [
                    "code" => 0,
                    "msg" => "操作成功",
                    "url" => (string)url("index")
                ];
            } else {
                if (is_numeric($post['BankCord']) && !empty($post['BankCord'])) {
                    $post["inserttime"] = time();
                    if (Db::table(self::$table)->where('account', $post['account'])->find() == null) {
                        $post['proxy_id'] = $this->proxy['id'];
                       //print_r($this->proxy);
                        Db::table(self::$table)->insert($post);
                        $return = [
                            "code" => 0,
                            "msg" => "操作成功",
                            "url" => (string)url("index")
                        ];
                    } else {
                        $return = [
                            "code" => 1,
                            "msg" => "账户已存在"
                        ];
                    }
                } else {
                    $return = [
                        "code" => 1,
                        "msg" => "暂不支持的银行，请联系系统管理员！"
                    ];
                }
            }
            return json($return);
        } else {
            $id = input("get.id", 0, "intval");
            if ($id > 0) {
                $data = Db::table(self::$table)
                    ->alias("a")
                    ->field("a.*,CONCAT(LEFT ( a.BankCard, 5 ),LPAD ( RIGHT ( a.BankCard, 5 ), length( a.BankCard )- 5, \"*\" )) BankCard,b.nickname")
                    ->join("do_mini_user b", "a.uid=b.id", "left")
                    ->find($id);
                $data = @array_merge($data, system_config('seat'));
                View::assign($data);
            } else {
                View::assign(system_config('seat'));
            }

            return view();
        }
    }

    public function delete()
    {

        $id = input("get.id");
        Db::table(self::$table)->where('proxy_id', $this->proxy['id'])->delete($id);
        $return = ["code" => 0, "msg" => "操作成功", "url" => (string)url("index")];
        return json($return);
    }

    /**
     * 店铺select2选择
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function shops()
    {
        $name = input("param.name", "", "trim");
        $id = input("param.id");
        $where = [];
        if ($name) {
            $where[] = [
                "name",
                "LIKE",
                "%{$name}%"
            ];
        }
        if ($id) {
            $where[] = [
                "id", "=", $id
            ];
        }
        $where[] = ['proxy_id', '=', $this->proxy['id']];
        $data = Db::table(self::$table)
            ->field("id,shop_name text")
            ->where($where)->order("id desc")->select();
        return json($data);
    }

    public function shopAdmin()
    {
        $id = input("param.id");
        $shop = Db::table(self::$table)->where(["id" => $id])->find();
        $user = Db::table("do_mini_user")->where(["id" => $shop["uid"]])->find();
        session("shop", $shop);
        session("user", $user);
        return redirect((string)url("shop/login/index"));
    }

    public function getBankCode()
    {
        $bank_name = input('post.BankName');
        $BankCode = getBankCode($bank_name);
        if ($BankCode == 0) {
            $return = ["code" => 1, "BankCode" => "暂不支持该银行"];
        } else {
            $return = ["code" => 0, "BankCode" => $BankCode];
        }
        return json($return);
    }
}
